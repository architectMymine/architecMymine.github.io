<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/17/hello-world/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="需要密码的哦，想看的话打个赏吧." /><label>需要密码的哦，想看的话打个赏吧.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="5088c1255e5d97e51a4bd73b0d6b94124143678c794b13d2b99b704f409e21b0">d817cf46e01cc893dfd2f01aeef02e13596fa206528751d0f4cee4e87f678d6ec3d6716d93075c44fd070c1fed6052fb25b6d47749d23a73fa9075bdd588de347a0ec7eb30d68a7bb65fcad8ba080640d75fce6c1b7b6495d13593e3efac2a9fc5c80490e6aeda4265c1b0e586332d47cb2d6884c9655e16f8137cf365abdbb18bbeece23aa0a21c891b5e94a3927e85dd6b45a7f75b61b0a3ae09f2276fbb543375f46330ca0c24f6b147ed19c0d66d186efa3b421207a6b8831d26e1d3929697177e41c89bf6b237bccbbf4efa0fa6f26bbd1c903e610c65c925eefc16f2d38aa6b091190fc45d2609eaafb8f7e3c4d2e12c482642a6b382dc4eb829da582fce40203e07ff69e7498d0b33456cd27eb500cfff1d132e35379c235fc2bd204b63ae7f86c2cb5753abdd99b50c193d35c42d8ee5592dbc0ced3876574b082f0d877192d90a295382c722fe8c45cef501f047e7c1a348099e15442461624a0e1066b5d6b74366a11f3a298a837f0f3aa958d3f81c1290b75abc05820b30e6ee7809d87b46dbe08090c173f0e7cef03c631357c3ab9b63a74ca733990409717b5404a2b6c5486f6140ffbf949dabdb9add4a39e19ab2deb21a880b4d0218d676a846b85f2e81763030a3efd502d0640f222f9c4421236ed4f0a72544d24d02c37a6c6e176b54af86d24f07e93417fe0815dd2fc2d2ea49ea378740e2e6720306e61d218aeb7843c729c6c632d453d8ddf65f3bc286a8fb228e5b0707c9b1a19564cb7372d02824c949bb591e7b9fc4edfebc83812ed096d50ab3480a709009ff67fdc4ee6464e447603f14ae345d10249171c2cc13151063bc6b2502aaf4144a0b3d6687ccf088e1096663af1be0a1562eb47d0687e44fff69f74269ac59a4b397e953fb7ce8bd036e9544b234e40233ce0d7b947784d665e99d3a1ee694d44d248114f1e44b7b800c84b91c24fffab5dbca9d9f3b43f1a338903467789001effe6c617447c4765ddf1bdd72a48ba5d30b82eb31f426080384d7f323a4e5b7086a6a7bc4083088f16b45a87f786196c0ee749195f647f5a934fb656764985af372c639c8417fdac2c3128d4b0efde5a233e3d3e9b5c625e94ca5371f70d069c793a6b57e0c201695a4703d9d4ff44fa00d43df5fd3eafabd8fe976cf4d85191412708f36abd73eb1c088890d052bbb17739d0886b527819298d8dab52b23c792c92230964a26b596b189b6c8c88ae56b69bc6724c1405a9e6b7160f6afeed2f3c13c6b2fce58f38313dec645c6709f44b9850cdd7f5ce77ae926dd101f178d6f172a03922c5053cb7e13bd524baca0012e275e24c5b534a8bd420c3dcaa5a952ac3b8086deb613f774565a24d2c3660ffb79c902011b0cd3f644f20694ed3deb64c228aac9dd8ba95fe23eceafe682f46b858489b5e114264e68db6660eb6a6bc4f7a865edb2e3b8d5af888a8c9373ce78bf2a500c76b7aafd98d408c8f2255c1706ca4a19e8436d09496ab336b53f17cd9c834967f1877c318bb1feac66429dfabf9bfa2866a907ea9d363f73be5221392ec4bea4a00161a25de9c651d00d611b67c81b11efb21b7c645f88db6a82a99c82c40641e045fe83adc299db196682055760a6adb34d58148f4234cb5d9ca9cce76eebc4aee7dc7216f73881b0b4ca476347884272dd416350748f9d4f8ae1256412d560733fdbd5b424ab615bd64189b3e59683fba272726a8117e3c3a1bee91d2db684f34f5f8c7208b0d1132e78e7074cc27f625ba4f91de50fe4264bcea96532d1281a0145f5b6a4f53164aea4dd7dd5b1c15aa6e415ee0fca076c639949c508307b7cef214e9d0551a5a8c73a2a735e2dfccfbce51f8a5fd0b0609ed22ee3e4da6e9dd68dda86dbf638d3ea69b06babfbb056959769b1c0eb1a9e68e1667f5bbeb3ec963cf92c1b436e4deab6812a2aa00c18805f5f398cf730c4df620e54c0081500ddb7adf11949cae34eab8c9a6613f273e124cc965998ab2bb79fa1cfed631cb5fb9848712b71ffcd47a9e1e9e545c229f2f917f475330aacac2a9d56d3f1f3dcf3082b18c5409c25b003a046ac389a6ba3bfec8431c1c7d4f3ed1da8def51cba18ad49a3cecf1674a93ae62f26c831010b325ce2113938dd21d625ce0fdca79aff4ac76b78111a4fd27ff528b103f5319d473a555a8c0d3a6f56cfbe4b643cb42a5e02760fcb4b0c8cbc1af20489155ad7a0a5e726af04155d49b3b82cdac50e6b979074db6e0cf35672ba79c08c77645214b0c1a8244e2dd304c571f9685ca953b94913c36aa1dc77d97815e8219f3213f3b9e468122444c392c3eb8168dce6f67fe22566f67dc8562ffce084c79ad96268c357ba561fbb8fde5cd099f479832bd293d085e9b0ba1b78f5d6f56b043b233419b383d05ad066cd7e188e6904891f1956c97ae03e1fd7bccc60b5787bd23ed6041a889f8ec74b9497e912d66261516494e4d71d4bb48308ea0e525907179ce6643b3da91ad51b2f7c09ecdd036ecbcef712ffb9368c21f5285489a12c9db57a0fbffb0106c2c5ac40b30190150b7aadeb1de5a9207f605bb076311e287410ac835b77fa5836e17b514cb0ffde9ab8de7a6117942c5f4169d1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>qqq</tag>
      </tags>
  </entry>
  <entry>
    <title>手动实现一个v-model的不同做法</title>
    <url>/2020/03/08/model/</url>
    <content><![CDATA[<p>由于疫情的原因啊，我猜大多数人都跟我一样，在家里度过，偶尔学习学习。这不，我遇到了<strong>一个如何手动一个v-model</strong>的问题，由此展开了学习。<br>在开始之前我们先需要知道一些知识，v-model是一个语法糖，如下：</p>
<a id="more"></a>
<p><code>&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</code><br>实则是等于下面的：<br><code>&lt;input type=&quot;text&quot; :value=&quot;name&quot; @input=&quot;name=$event.target.value&quot;&gt;</code><br>也就是说，v-model就是<strong>绑定了一个名为value的props和一个事件input</strong><br>            注意：所以在子组件中可以通过props中定义value接受值，然后通过$emit触发input事件传新值并修改。 </p>
<p>知道了这个知识之后啊，那么我们就开始实现一个自定义的v-model啦<del>~</del></p>
<h2 id="一、最简单的实现方法"><a href="#一、最简单的实现方法" class="headerlink" title="一、最简单的实现方法"></a>一、最简单的实现方法</h2><p>首先是父组件的代码：</p>
<pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span>
<span class="xml">  </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span></span>
<span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="xquery">&#123;<span class="hljs-built_in">&#123;name</span>&#125;</span><span class="xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>
<span class="xml">      </span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">son</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">son</span>&gt;</span></span>
<span class="xml">      <span class="hljs-comment">&lt;!-- 等同于下面 --&gt;</span></span>
<span class="xml">      <span class="hljs-comment">&lt;!-- </span></span><span class="xml"><span class="hljs-comment">&lt;son type="text" :value="name" @input="name=子组件传回来的值"&gt; --&gt;</span></span>
<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>
<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span>

<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span></span>
<span class="xml">import Son from './son'</span>
<span class="xml">export default </span><span class="xquery">&#123;</span>
<span class="xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">""</span>,</span>
<span class="xquery">  data() &#123;</span>
<span class="xquery">    <span class="hljs-keyword">return</span> &#123;</span>
<span class="xquery">       <span class="hljs-built_in"> name</span>:<span class="hljs-string">'ydw'</span>,</span>
<span class="xquery">    &#125;</span>
<span class="xml">  &#125;,</span>
<span class="xml">  components: </span><span class="xquery">&#123;</span>
<span class="xquery">      Son</span>
<span class="xquery">  &#125;</span>
<span class="xml">&#125;</span>
<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre>

<p>然后是子组件的代码：</p>
<pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">template</span>&gt;
  &lt;div <span class="hljs-keyword">class</span>&gt;
      &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>="text" :<span class="hljs-keyword">value</span>="value" @input="$emit('input',$event.target.value)"&gt;
  &lt;/div&gt;
&lt;/<span class="hljs-keyword">template</span>&gt;

&lt;script <span class="hljs-keyword">type</span>="text/javascript"&gt;
export <span class="hljs-keyword">default</span> &#123;
  <span class="hljs-type">name</span>: "",
  props:&#123;
      <span class="hljs-keyword">value</span>:&#123;
          <span class="hljs-keyword">type</span>: String,
          defalut () 
              <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>
          &#125;
      &#125;
  &#125;,
  data() &#123;
    <span class="hljs-keyword">return</span> &#123;

    &#125;
  &#125;,
  components: &#123;
  &#125;
&#125;
&lt;/script&gt;</code></pre>
<p>父组件中我加了一个注释的代码行，其实是帮助我自己理解的，不知道有没有小伙伴跟我一样，第一次看的时候压根不知道它在做什么的？哭唧唧。</p>
<h2 id="二、使用watch和-emit实现"><a href="#二、使用watch和-emit实现" class="headerlink" title="二、使用watch和$emit实现"></a>二、使用watch和$emit实现</h2><p>跟上面的一个有些类似，只不过上面是用本身input事件的作用，通过input事件的频发触发传递值给父组件，这里只是将这个过程换成了通过watch监听值得变化，然后通过input事件触发函数事件，函数事件里提交变化的值给父组件。好了，我只需要修改子组件，如下：</p>
<pre><code class="hljs kotlin">&lt;template&gt;
  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>&gt;</span>
    &lt;input type=<span class="hljs-string">"text"</span> :value=<span class="hljs-string">"sonVal"</span> <span class="hljs-meta">@input</span>=<span class="hljs-string">"handleModel"</span> /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;
export <span class="hljs-keyword">default</span> &#123;
  name: <span class="hljs-string">""</span>,
  props: &#123;
    value: &#123;
      type: String,
      defalut() &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;
      &#125;
    &#125;
  &#125;,
  <span class="hljs-keyword">data</span>() &#123;
    <span class="hljs-keyword">return</span> &#123;
      sonVal:<span class="hljs-keyword">this</span>.value
    &#125;;
  &#125;,
  watch: &#123;
    value(newval) &#123;
      <span class="hljs-keyword">this</span>.sonVal = newval
    &#125;
  &#125;,
  methods:&#123;
    handleModel(e)&#123;
        <span class="hljs-keyword">this</span>.sonVal = e.target.value
        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'input'</span>,<span class="hljs-keyword">this</span>.sonVal)
    &#125;
  &#125;
&#125;;
&lt;/script&gt;</code></pre>
<p>通过watch监听props值得变化，赋值给子组件本身定义的sonVal，绑定在input里。然后利用input事件触发函数，提交到父组件。</p>
<h2 id="三、使用最新的语法，model属性。"><a href="#三、使用最新的语法，model属性。" class="headerlink" title="三、使用最新的语法，model属性。"></a>三、使用最新的语法，model属性。</h2><p>本来我是不知道有这个属性的，就是在网上搜索关于v-model实现方法的时候，就不知不觉的查到这个属性，查看官方文档如下：<br><img src="./model.png" alt="avatar"></p>
<p>也就是说这个属性是为了回避props定义的value这个名字的。</p>
<p>下面看看它的用法，我们先看子组件怎么修改：</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"val"</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">"$emit('change',$event.target.value)"</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span>
<span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>
<span class="actionscript">  name: <span class="hljs-string">""</span>,</span>
  model:&#123;
<span class="actionscript">    prop:<span class="hljs-string">'val'</span>,</span>
<span class="actionscript">    event:<span class="hljs-string">'change'</span></span>
  &#125;,
  props: &#123;
    val: &#123;
<span class="javascript">      type: <span class="hljs-built_in">String</span>,</span>
      defalut() &#123;
<span class="actionscript">        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;</span>
      &#125;
    &#125;
  &#125;,
  data() &#123;
<span class="actionscript">    <span class="hljs-keyword">return</span> &#123;</span>
    &#125;;
  &#125;
&#125;;
<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>
<p>model属性中prop是重新命名传值的名字，而event则是重新命名事件的名字，但是同样的，props中的传值名字必须与model属性中的prop的名字一样。其实只要对比一下第一种方法就知道，vue多出一个model属性是为了value这个名字可以使用。</p>
<h4 id="同样的，这里也贴出使用新属性后，在使用wacth是什么样的，也是只是修改了son组件"><a href="#同样的，这里也贴出使用新属性后，在使用wacth是什么样的，也是只是修改了son组件" class="headerlink" title="同样的，这里也贴出使用新属性后，在使用wacth是什么样的，也是只是修改了son组件"></a>同样的，这里也贴出使用新属性后，在使用wacth是什么样的，也是只是修改了son组件</h4><pre><code class="hljs kotlin">&lt;template&gt;
  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>&gt;</span>
    &lt;input type=<span class="hljs-string">"text"</span> :value=<span class="hljs-string">"sonVal"</span> <span class="hljs-meta">@input</span>=<span class="hljs-string">"handleModel"</span> /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script type=<span class="hljs-string">"text/javascript"</span>&gt;
export <span class="hljs-keyword">default</span> &#123;
  name: <span class="hljs-string">""</span>,
  model:&#123;
    prop:<span class="hljs-string">'val'</span>,
    event:<span class="hljs-string">'change'</span>
  &#125;,
  props: &#123;
    <span class="hljs-keyword">val</span>: &#123;
      type: String,
      defalut() &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;
      &#125;
    &#125;
  &#125;,
  <span class="hljs-keyword">data</span>() &#123;
    <span class="hljs-keyword">return</span> &#123;
      sonVal:<span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span>
    &#125;;
  &#125;,
  watch: &#123;
    value(newval) &#123;
      <span class="hljs-keyword">this</span>.sonVal = newval
    &#125;
  &#125;,
  methods:&#123;
    handleModel(e)&#123;
        <span class="hljs-keyword">this</span>.sonVal = e.target.value
        <span class="hljs-keyword">this</span>.$emit(<span class="hljs-string">'change'</span>,<span class="hljs-keyword">this</span>.sonVal)
    &#125;
  &#125;
&#125;;
&lt;/script&gt;</code></pre>

<p>其实也没多大的修改，只是想贴出来而已。那么手写一个v-model我就写完了，觉得有用的同志给我点个赞赞赞赞赞赞呗。</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
